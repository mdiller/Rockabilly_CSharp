package rockabilly.coarsegrind.examples.simple;

import rockabilly.coarsegrind.core.Global;
import rockabilly.coarsegrind.core.TestCase;

public class SimpleExample4 extends TestCase
{

	@Override
	public String getTestCaseDetailedDescription()
	{
		return "This is the detailed description for SimpleExample4.  Use this field to describe what the test does and what its pass criteria are. Commas, \tTabs, \rCarriage Returns, \nLine Feeds, and \fForm Feed chars will be filtered out.";
	}

	@Override
	public void performTest()
	{
		// This would be where you actually perform the test.  What a surprise, huh?
		// If setup fails, it will NOT be run.

		// You should log every little thing the test does.  That lessens the chance of needing to re-run when a bug happens.
		Global.Log.message("Deliberately throwing an exception");

		try {
			
			Global.Log.message("Calling doSomethingTwo()");
			//int return2 = doSomethingTwo();

			throw new NullPointerException("This is a FAKE null pointer exception. Nothing's actually wrong.");
		} catch (Exception loggedException) {
			loggedException.initCause(new IndexOutOfBoundsException("Also a FAKE exception. Carry on."));
			addResult(getResultForFailure(loggedException));
			
			// If you don't want to actually add a TestResult containing
			// the exception you can simply log it with the line below instead.
			// Global.Log.showFailure(loggedException);
		}
	}

	@Override
	public boolean cleanup()
	{
		// This will ALWAYS be run, even if setup failed.
		return true;
	}

	@Override
	public String getIdentifier()
	{
		// This can be anything but is typically a number generated by a test case management system.
		// It is generally easier to say that "Test ST7 failed" than "The string-based selection upper limit test failed."
		return "ST4";
	}

	@Override
	public String getName()
	{
		// This should be a human-readable name that describes the test in-brief
		return "Sample Test FOUR";
	}

	@Override
	public boolean setup()
	{
		// Perform any test case specific setup.
		// If this does not return true, performTest() will never be run.
		// You may wish to make an abstract class that extends TestCase.
		// Lots of testcases could extend that and share the same setup(),
		// cleanup(), and other common methods.
		return true;
	}

	@Override
	public String[] getTestSuiteMemberships() {
		return new String[] {"Simple", "All"};
	}

	@Override
	public String[] getTestCategoryMemberships() {
		return new String[] {"Example"};
	}

}
